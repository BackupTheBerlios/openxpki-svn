#!/usr/bin/perl
#
# Written by Martin Bartosch for the OpenXPKI project 2006
# Copyright (c) 2006 by The OpenXPKI Project
# $Revision: 80 $
#

use strict;
use warnings;
use English;
use Getopt::Long;
use Pod::Usage;

# use Smart::Comments;

use OpenXPKI::Debug;
use OpenXPKI::XML::Config;
require OpenXPKI::Server;

sub slurp {
    my $filename = shift;

    my $content = do {
	open my $HANDLE, "<", $filename;
	local $INPUT_RECORD_SEPARATOR;
	<$HANDLE>;
    };
    return $content;
}


my $configfile = '[% dir.sysconfdir %]/config.xml';

my %params;
GetOptions(\%params,
	   qw(
	      help|?
	      man
	      cfg|cfgfile|conf|config=s
              debug=i
	      )) or pod2usage(-verbose => 0);

pod2usage(-exitstatus => 0, -verbose => 2) if $params{man};
pod2usage(-verbose => 1) if ($params{help});
if (scalar @ARGV != 1) {
    print "Usage: openxpkictl [OPTIONS] start|stop\n";
    exit 0;
}

if (defined $params{debug}) {
    $OpenXPKI::Debug::LEVEL{'.*'} = $params{debug};
}

if (defined $params{cfg}) {
    $configfile = $params{cfg};
}

my $config = OpenXPKI::XML::Config->new(CONFIG => $configfile);

if (! defined $config) {
    print STDERR "ERROR: Could not read configuration file $configfile.";
    exit 1;
}

my $pidfile;
eval {
    $pidfile = $config->get_xpath (
	XPATH   => ["common", "server", "pid_file"],
	COUNTER => [0, 0, 0],
	);
};
if ($EVAL_ERROR)
{
    print "ERROR: Could not determine PID file from configuration: " . $EVAL_ERROR->as_string() . "\n";
    exit 1;
}

### $pidfile

my $pid;
if (-r $pidfile) {
    $pid = slurp($pidfile);
    chomp $pid;
}

my $cmd = shift;
if ($cmd eq 'start') {
    if (defined $pid && kill(0, $pid)) {
	print STDERR "OpenXPKI Server already running (pid $pid)\n";
	exit 0;
    }
    print "Starting OpenXPKI...\n";
    if (! OpenXPKI::Server->new ("CONFIG" => $configfile)) {
	print STDERR "Could not start OpenXPKI Server daemon.\n";
	exit 1;
    }
}
if ($cmd eq 'stop') {
    if (! defined $pid || (kill(0, $pid) == 0)) {
	print STDERR "OpenXPKI Server is not running.\n";
	exit 0;
    }
    print "Stopping OpenXPKI..";

    my @signals = (2, 2, 3, 3, 9);
  TERMINATE:
    foreach my $sig (@signals) {
	print '.';
	kill($sig, $pid);
	sleep 1;
	last TERMINATE if (kill(0, $pid) == 0);
    }
    if (kill(0, $pid)) {
	print " failure.\n";
	print STDERR "Could not terminate OpenXPKI Server daemon.\n";
	exit 1;
    }
    print " done.\n";
}

exit 0;

__END__

=head1 NAME

openxpkictl [options] COMMAND

 Options:
   --help           brief help message
   --man            full documentation
   --config FILE    use configuration from FILE

 Commands:
   start            Start OpenXPKI daemon
   stop             Stop OpenXPKI daemon


=head1 OPTIONS

=over 8

=item B<--help>

Print a brief help message and exits.

=item B<--man>

Prints the manual page and exits.

=item B<--config FILE>

Read configuration file FILE. Uses built-in default if not specified.

=back

=head1 COMMANDS

=over 8

=item B<start>

Starts the OpenXPKI daemon.

=item B<stop>

Stops the OpenXPKI daemon.

=back


=head1 DESCRIPTION

B<openxpkictl> is a front end to the OpenXPKI System. It is designed
to help the  administrator control the functioning of the OpenXPKI
server daemon.

=over 8

NOTE: This script was customized to the paths specified during 
installation.
You will have to modify this script to reflect any changes to the 
installation directories.

The openxpkictl script returns a 0 exit value on success, and >0 if  an
error occurs.

=back

=cut

