#!/usr/bin/perl
#
# Written by Martin Bartosch for the OpenXPKI project 2006
# Copyright (c) 2006 by The OpenXPKI Project
# $Revision$
#

use strict;
use warnings;
use English;
use Getopt::Long;
use Pod::Usage;
use POSIX;
use Errno;

# use Smart::Comments;

use OpenXPKI::Debug;

sub slurp {
    my $filename = shift;

    my $content = do {
	open my $HANDLE, "<", $filename;
	local $INPUT_RECORD_SEPARATOR;
	<$HANDLE>;
    };
    return $content;
}


my $configfile = '[% dir.sysconfdir %]/config.xml';

my %params;
GetOptions(\%params,
	   qw(
	      help|?
	      man
	      cfg|cfgfile|conf|config=s
              debug=s@
	      )) or pod2usage(-verbose => 0);

pod2usage(-exitstatus => 0, -verbose => 2) if $params{man};
pod2usage(-verbose => 1) if ($params{help});
if (scalar @ARGV != 1) {
    print STDERR "Usage: openxpkictl [OPTIONS] start|stop\n";
    exit 0;
}

if (defined $params{debug}) {
    @{$params{debug}} = split(m{,}, join(',', @{$params{debug}}));
    
    foreach my $param (@{$params{debug}}) {
	my ($module, $level) = ($param =~ m{ \A (.*?):?(\d*) \z }xms);
	if ($level eq '') {
	    $level = 1;
	}
	if ($module eq '') {
	    $module = '.*';
	}
	print STDERR "Debug level for module '$module': $level\n";
 	$OpenXPKI::Debug::LEVEL{$module} = $level;
    }
}

use OpenXPKI::XML::Config;
require OpenXPKI::Server;

if (defined $params{cfg}) {
    $configfile = $params{cfg};
}

my $config = OpenXPKI::XML::Config->new(CONFIG => $configfile);

if (! defined $config) {
    print STDERR "ERROR: Could not read configuration file $configfile\n";
    exit 1;
}

my $pidfile;
eval {
    $pidfile = $config->get_xpath (
	XPATH   => ["common", "server", "pid_file"],
	COUNTER => [0, 0, 0],
	);
};
if ($EVAL_ERROR)
{
    print STDERR "ERROR: Could not determine PID file from configuration: " . $EVAL_ERROR->as_string() . "\n";
    exit 1;
}

### $pidfile

my $pid;
if (-r $pidfile) {
    $pid = slurp($pidfile);
    chomp $pid;
}

my $cmd = shift;
if ($cmd eq 'start') {
    if (defined $pid && kill(0, $pid)) {
	print STDERR "OpenXPKI Server already running (pid $pid)\n";
	exit 0;
    }
    print STDERR "Starting OpenXPKI...\n";
    unlink $pidfile;

  FORK: 
    {
	if ($pid = fork) {
	    # parent here
	    # child process pid is available in $pid
	    waitpid(-1, 0);
	    
	    # FIXME: find out if the server is REALLY running properly

	    exit 0;
	}
	elsif (defined $pid) { # $pid is zero here if defined
	    # child here
	    # parent process pid is available with getppid
	    
	    # prepare daemonizing myself
	    # redirect filehandles
	    open STDOUT, ">/dev/null" or
		die "unable to write to /dev/null!: $!";
	    open STDIN, "/dev/null" or
		die "unable to read from /dev/null!: $!";

	    chdir '/';

            # create new session
	    POSIX::setsid or
		die "unable to create new session!: $!";

	    open STDERR, '>&STDOUT' or
		die "unable to attach STDERR to STDOUT!: $!";
	    
	    if (! OpenXPKI::Server->new ("CONFIG" => $configfile)) {
		print STDERR "Could not start OpenXPKI Server daemon.\n";
		exit 1;
	    }
	}
	elsif ($!{EAGAIN}) {
	    # EAGAIN is the supposedly recoverable fork error
	    sleep 5;
	    redo FORK;
	}
	else {
	    # weird fork error
	    die "Can't fork: $!\n";
	}
    }
    
}
if ($cmd eq 'stop') {
    if (! defined $pid || (kill(0, $pid) == 0)) {
	print STDERR "OpenXPKI Server is not running.\n";
	exit 0;
    }
    print STDERR "Stopping OpenXPKI..";

    my @signals = (2, 2, 3, 3, 9);
  TERMINATE:
    foreach my $sig (@signals) {
	print STDERR '.';
	kill($sig, $pid);
	sleep 1;
	last TERMINATE if (kill(0, $pid) == 0);
    }
    if (kill(0, $pid)) {
	print STDERR " failure.\n";
	print STDERR "Could not terminate OpenXPKI Server daemon.\n";
	exit 1;
    }
    print STDERR " done.\n";
}

exit 0;

__END__

=head1 NAME

openxpkictl [options] COMMAND

 Options:
   --help                brief help message
   --man                 full documentation
   --config FILE         use configuration from FILE
   --debug  MODULE:LEVEL set MODULE debug level to LEVEL 
                         (positive integer value).
                         MODULE defaults to '.*'
                         LEVEL defaults to 1

 Commands:
   start            Start OpenXPKI daemon
   stop             Stop OpenXPKI daemon


=head1 OPTIONS

=over 8

=item B<--help>

Print a brief help message and exits.

=item B<--man>

Prints the manual page and exits.

=item B<--config FILE>

Read configuration file FILE. Uses built-in default if not specified.

=item B<--debug MODULE:LEVEL>

Set specific module debug level to LEVEL (must be a positive integer). Higher
values mean more debug output. Multiple --debug options can be specified.
It is also possible to specify multiple debug settings in one --debug
option by separating them with a comma.
MODULE must be a module specification (e. g. OpenXPKI::Server) and may
contain Perl Regular expressions.

MODULE defaults to '.*' if not specified. LEVEL defaults to 1 if not specified.

Examples:

  --debug
 (equivalent to --debug .*:1)

  --debug OpenPKI::Server
  (equivalent to --debug OpenXPKI::Server:1)

  --debug OpenPKI::Server:100
  (equivalent to --debug OpenXPKI::Server:100)

  --debug OpenPKI::Server:10 --debug OpenXPKI::Crypto::.*:20
  --debug OpenXPKI::Server:10,OpenXPKI::Crypto::.*:20
  (these two are equivalent)


=back

=head1 COMMANDS

=over 8

=item B<start>

Starts the OpenXPKI daemon.

=item B<stop>

Stops the OpenXPKI daemon.

=back


=head1 DESCRIPTION

B<openxpkictl> is the start script for the OpenXPKI server process. 

=over 8

NOTE: This script was customized to the paths specified during 
installation.
You will have to modify this script to reflect any changes to the 
installation directories.

The openxpkictl script returns a 0 exit value on success, and >0 if  an
error occurs.

=back

=cut

